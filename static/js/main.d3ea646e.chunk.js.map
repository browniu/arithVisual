{"version":3,"sources":["pages/main/styles.module.scss","pages/main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","bubbleSort","array","i","length","j","exchange","last","steps","push","index","slice","randomArraySingleInRange","min","max","n","creatItem","item","Math","floor","random","includes","state","step","this","targetArray","console","log","nextStep","setState","timer","setInterval","clearInterval","list","balancePos","className","styles","style","height","transform","balance","map","cn","act","key","width","root","panel","onClick","autoStep","button","renderList","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3ea646e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__1YrxX\",\"panel\":\"styles_panel__2jDUU\",\"button\":\"styles_button__UI8kv\",\"list\":\"styles_list__2ak9i\",\"act\":\"styles_act__3FVE1\",\"balance\":\"styles_balance__1bA2G\"};","import React, {Component} from 'react';\nimport styles from './styles.module.scss'\nimport cn from 'classnames'\n\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.steps = [];\n        this.state = {\n            step: 0\n        }\n    }\n\n    componentDidMount() {\n        this.targetArray = this.randomArraySingleInRange(1, 10, 10);\n        console.log(this.bubbleSort(this.targetArray));\n        console.log(this.steps);\n        this.nextStep()\n    }\n\n    bubbleSort = (array) => {\n        for (let i = 0; i < array.length; i++) {\n            for (let j = 0; j < array.length - i; j++) {\n                let exchange = [];\n                if (array[j - 1] && (array[j - 1] - array[j]) > 0) {\n                    const last = array[j];\n                    array[j] = array[j - 1];\n                    array[j - 1] = last;\n                    exchange = [j - 1, j]\n                }\n                this.steps.push({index: j, array: array.slice(), exchange})\n            }\n        }\n        return array\n    };\n\n    randomArraySingleInRange = (min, max, n = 1) => {\n        if (max - min < n) max = min + n;\n        const array = [];\n        const creatItem = () => {\n            const item = Math.floor(Math.random() * (max - min + 1)) + min;\n            if (array.includes(item)) creatItem();\n            else {\n                array.push(item);\n                if (array.length < n) creatItem();\n            }\n        };\n        creatItem();\n        return array;\n    };\n\n\n    nextStep() {\n        if (this.state.step < this.steps.length) {\n            this.setState({step: this.state.step + 1})\n        }\n    }\n\n    autoStep() {\n        const timer = setInterval(() => {\n            if (this.state.step < this.steps.length) this.nextStep();\n            else clearInterval(timer)\n        }, 1000)\n    }\n\n    renderList(index) {\n        const list = this.steps[index - 1].array;\n        const balancePos = this.steps[index - 1].index - 1;\n        const exchange = this.steps[index - 1].exchange;\n        return (<ul className={styles.list}>\n            <div style={{\n                height: (balancePos <= 0) ? '32px' : '66px',\n                transform: `translateY(${(balancePos > 0 ? balancePos - 1 : 0) * (32 + 3)}px)`\n            }}\n                 className={styles.balance}/>\n            {list.map((item, index) => (\n                <li\n                    className={cn({[styles.act]: ((index === balancePos) || index === balancePos - 1)})}\n                    key={item}>\n                    <span\n                        className={cn({[styles.act]: (index === exchange[0] || index === exchange[0] - 1)})}\n                        style={{width: index === exchange[0] ? `${(list[exchange[0] + 1] / 11) * 100}%` : index === exchange[0] + 1 ? `${(list[exchange[0]] / 11) * 100}%` : `${(item / 11) * 100}%`}}\n                    >{item}</span></li>\n            ))}\n        </ul>)\n    }\n\n    render() {\n        const {step} = this.state;\n        return (\n            <div className={cn(styles.root, 'browniu-app-root')}>\n                <div className={styles.panel}>\n                    <span onClick={() => this.autoStep()} className={styles.button}>冒泡排序</span>\n                </div>\n                {step > 0 && this.renderList(step)}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport Main from './pages/main'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Main/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}